#Made by Amin Zamani
#WinLoss.csv generated by Antonio (it's simply one of the files for the NFL stats with an extra Win/Loss column)
#This model uses RushAtOff, PassAtOff, ScoreDef, and Site to predict the Win/Loss for a team and generates a learning curve graph
if __name__ == '__main__':
    import numpy as np
    import pandas as pd

    def warn(*args, **kwargs):
        pass
    import warnings
    warnings.warn = warn
    np.warnings.filterwarnings('ignore')

    #Read dataset
    import os
    data_loc = os.path.normpath('datasets/WinLoss.csv')
    dataset = pd.read_csv(data_loc)

    #Indices:
      #7=RushAtOff
      #9=PassAtOff
      #2=Outcome
      #20=ScoreDef
      #34=Site ("H" or "V")

    #Removing Nan
    Y = dataset.iloc[:,2].values
    nan_indices = [i for i in range(len(Y)) if type(Y[i])!=str and np.isnan(Y[i])]
    dataset = dataset[~dataset.index.isin(nan_indices)]

    #Define X,Y
    X = dataset.iloc[:, [7,9,20,34]].values
    Y = dataset.iloc[:,2].values

    #Using categorical data for Y, so we have to change "Win/Loss" to numbers like 0 and 1
    from sklearn.preprocessing import LabelBinarizer, LabelEncoder, OneHotEncoder
    label_X = LabelEncoder()
    #Replace "H" and "V" values to numbers: "H"=Home, "V"=Visitor
    X[:,3] = label_X.fit_transform(X[:,3])
    #Transform Win/Loss column to numerical vals
    label = LabelBinarizer()
    Y = label.fit_transform(Y)

    #Train/test split
    from sklearn.model_selection import train_test_split
    X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2)

    #Create model
    from sklearn import pipeline
    from sklearn import svm
    from sklearn.decomposition import IncrementalPCA
    from sklearn.preprocessing import StandardScaler
    svc = svm.SVC()
    kernel = IncrementalPCA()
    pipe = pipeline.make_pipeline(kernel,StandardScaler(),svc)
    pipe.fit(X_train, Y_train)

    #Accuracy Checking
    y_pred = pipe.predict(X_test)
    from sklearn import metrics
    rep = metrics.classification_report(Y_test,y_pred)
    print(rep)

    #Plotting learning curve
    from sklearn.model_selection import learning_curve
    import matplotlib.pyplot as plt
    # Create CV training and test scores for various training set sizes
    train_sizes, train_scores, test_scores = learning_curve(pipe,X,Y,
                                                            # Number of folds in cross-validation
                                                            cv=10,
                                                            # Evaluation metric
                                                            scoring='accuracy',
                                                            # Use all computer cores
                                                            n_jobs=-1,
                                                            # 50 different sizes of the training set
                                                            train_sizes=np.linspace(0.01, 1.0, 50))

    # Create means and standard deviations of training set scores
    train_mean = np.mean(train_scores, axis=1)
    train_std = np.std(train_scores, axis=1)

    # Create means and standard deviations of test set scores
    test_mean = np.mean(test_scores, axis=1)
    test_std = np.std(test_scores, axis=1)

    # Draw lines
    plt.plot(train_sizes, train_mean, '--', color="#111111", label="Training score")
    plt.plot(train_sizes, test_mean, color="#111111", label="Cross-validation score")

    # Draw bands
    plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, color="#DDDDDD")
    plt.fill_between(train_sizes, test_mean - test_std, test_mean + test_std, color="#DDDDDD")

    # Create plot
    plt.title("Learning Curve")
    plt.xlabel("Training Set Size"), plt.ylabel("Accuracy Score"), plt.legend(loc="best")
    plt.tight_layout()
    plt.show()